name: Docker Slurm

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_IMAGE_FRONTEND: ghcr.io/noaa-gsl/dockerslurmcluster/slurm-frontend

jobs:

  build-slurmfrontend-arm64:
    runs-on: LinuxARM64-4core-16G-150Gb
    timeout-minutes: 360
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      -
        # Beta ARM runners do not have Docker installed
        name: Install Docker
        run: |
           # Uninstall incompatible packages
           for pkg in docker.io containerd runc; do sudo apt-get remove $pkg; done
           # Add Docker's official GPG key:
           sudo apt-get update
           sudo apt-get install ca-certificates curl
           sudo install -m 0755 -d /etc/apt/keyrings
           sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
           sudo chmod a+r /etc/apt/keyrings/docker.asc
           # Add the repository to Apt sources:
           echo \
             "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
             $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
             sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
           sudo apt-get update -y
           # Install docker packages
           sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
           # Allow runner use to run docker without sudo
           sudo usermod -aG docker $USER
           sudo apt-get install acl
           sudo setfacl --modify user:$USER:rw /var/run/docker.sock
      -
        name: Test Docker Installation
        run: docker run hello-world
      -
        name: Checkout repository
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE_FRONTEND }}
          tags: |
            type=raw,value=latest
          flavor: |
            latest=true
            prefix=
            suffix=
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      -
        name: Prune pre-loaded GHA docker images
        run: |
          docker images
          docker image prune -a -f
          docker images
      -
        name: Build frontend and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/noaa-gsl/dockerslurmcluster/frontend-cache-arm64:cache
          cache-to: type=registry,ref=ghcr.io/noaa-gsl/dockerslurmcluster/frontend-cache-arm64:cache,mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE_FRONTEND }},push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-linux-arm64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      -
        name: Debug session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
        with:
          limit-access-to-actor: true

  docker_build:
    name: Docker Build
    runs-on: ubuntu-20.04

    steps:
      -
        name: Checkout Repository
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Build and start containers
        run: docker-compose -f docker-compose.yml up --build -d

      -
        name: Check cluster logs
        run: docker-compose -f docker-compose.yml logs

      -
        name: Check status of the cluster containers
        run: docker-compose -f docker-compose.yml ps

      -
        name: Check status of Slurm
        run: docker exec slurm-frontend sinfo

      -
        name: Run a Slurm job
        run: docker exec slurm-frontend srun hostname

      -
        name: Test ssh access to Slurm compute nodes
        run: |
          docker exec slurm-frontend timeout 1s ssh slurmnode1 hostname
          docker exec slurm-frontend timeout 1s ssh slurmnode2 hostname
          docker exec slurm-frontend timeout 1s ssh slurmnode3 hostname

      -
        name: Shut down Slurm cluster containers
        run: docker-compose -f docker-compose.yml down

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          file: ./frontend/Dockerfile
          push: true
          tags: noaagsl/slurm-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build and push master
        uses: docker/build-push-action@v4
        with:
          context: ./master
          platforms: linux/amd64,linux/arm64
          file: ./master/Dockerfile
          push: true
          tags: noaagsl/slurm-master:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      -
        name: Build and push node
        uses: docker/build-push-action@v4
        with:
          context: ./node
          platforms: linux/amd64,linux/arm64
          file: ./node/Dockerfile
          push: true
          tags: noaagsl/slurm-node:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
